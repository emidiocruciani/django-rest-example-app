services:

  example-app-django:
    container_name: example_app_django
    networks:
      - example-app
      - example-app-backend
    depends_on:
      - example-app-pgsql-db
      - example-app-mailhog-smtp

  example-app-nginx:
    container_name: example_app_nginx
    image: 'nginx:alpine'
    ports:
      - '127.0.0.1:8080:80'
      - '172.17.0.1:8080:80'
    volumes:
      - ./docker/dev/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - example-app
      - example-app-backend

  example-app-pgsql-db:
    container_name: example_app_pgsql_db
    image: 'postgres:14'
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
    volumes:
      - 'example-app-pgsql-db:/var/lib/postgresql/data'
    networks:
      - example-app
      - example-app-backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "app", "-U", "user" ]
      retries: 3
      timeout: 5s

  example-app-mailhog-smtp:
    container_name: example_app_mailhog_smtp
    image: 'mailhog/mailhog:latest'
    ports:
      - '127.0.0.1:8025:8025'
    networks:
      - example-app
      - example-app-backend

  example-app-adminer-tool:
    container_name: example_app_adminer_tool
    image: adminer:4.8.1
    environment:
      - ADMINER_DESIGN=mvt
      - ADMINER_DEFAULT_SERVER=example-app-pgsql-db
    ports:
      - '127.0.0.1:8090:8080'
    networks:
      - example-app
      - example-app-backend
    depends_on:
      - example-app-pgsql-db

networks:

  example-app:
    driver: bridge

  example-app-backend:
    driver: bridge

volumes:

  example-app-pgsql-db:
    driver: local
